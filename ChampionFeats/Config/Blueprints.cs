using HarmonyLib;
using Kingmaker.Blueprints;
using Kingmaker.Blueprints.JsonSystem;
using Kingmaker.Utility;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using ChampionFeats;
using Kingmaker.DialogSystem.Blueprints;
using Kingmaker.ElementsSystem;
using ChampionFeats.Utilities;
using Kingmaker.UnitLogic.Buffs.Blueprints;
using Kingmaker.Designers.EventConditionActionSystem.Evaluators;
using Kingmaker.Designers.EventConditionActionSystem.Actions;
using Kingmaker.Designers.EventConditionActionSystem.Conditions;
using Kingmaker.RuleSystem.Rules;
using Kingmaker.Designers.Mechanics.Facts;
using Kingmaker;
using System.Linq;
using Kingmaker.EntitySystem.Entities;
using Kingmaker.Blueprints.Classes;
using ChampionFeats.Components;
using Kingmaker.UnitLogic;
using Kingmaker.UnitLogic.Buffs;

namespace ChampionFeats.Config {
    public class Blueprints : IUpdatableSettings {
        [JsonProperty]
        private bool OverrideIds = false;
        [JsonProperty]
        private readonly SortedDictionary<string, Guid> NewBlueprints = new SortedDictionary<string, Guid>();
        [JsonProperty]
        private readonly SortedDictionary<string, Guid> AutoGenerated = new SortedDictionary<string, Guid>();
        [JsonProperty]
        private readonly SortedDictionary<string, Guid> UnusedGUIDs = new SortedDictionary<string, Guid>();
        private readonly SortedDictionary<string, Guid> UsedGUIDs = new SortedDictionary<string, Guid>();

        public void OverrideSettings(IUpdatableSettings userSettings) {
            var loadedSettings = userSettings as Blueprints;
            if (loadedSettings == null) { return; }
            if (loadedSettings.OverrideIds) {
                OverrideIds = loadedSettings.OverrideIds;
                loadedSettings.NewBlueprints.ForEach(entry => {
                    if (NewBlueprints.ContainsKey(entry.Key)) {
                        NewBlueprints[entry.Key] = entry.Value;
                    }
                });
            }
            loadedSettings.AutoGenerated.ForEach(entry => {
                AutoGenerated[entry.Key] = entry.Value;
            });
        }
        public BlueprintGuid GetGUID(string name) {

            Guid Id;
            if (!NewBlueprints.TryGetValue(name, out Id)) {
#if DEBUG
                if (!AutoGenerated.TryGetValue(name, out Id)) {
                    Id = Guid.NewGuid();
                    AutoGenerated.Add(name, Id);
                    Main.LogDebug($"Generated new GUID: {name} - {Id}");
                } else {
                    Main.LogDebug($"WARNING: GUID: {name} - {Id} is autogenerated");
                }
#endif
            }
            if (Id == null) { Main.Error($"ERROR: GUID for {name} not found"); }
            UsedGUIDs[name] = Id;
            return new BlueprintGuid(Id);
        }

        [HarmonyPatch(typeof(BlueprintsCache), "Init")]
        static class AutoGUID_Log_Patch {

            [HarmonyPriority(Priority.Last)]
            static void Postfix() {
                GenerateUnused();
                WriteBlueprints("Blueprints.json");
                SetupCueHooks();
            }
            static void GenerateUnused() {
                ModSettings.Blueprints.AutoGenerated.ForEach(entry => {
                    if (!ModSettings.Blueprints.UsedGUIDs.ContainsKey(entry.Key)) {
                        ModSettings.Blueprints.UnusedGUIDs[entry.Key] = entry.Value;
                    }
                });
                ModSettings.Blueprints.NewBlueprints.ForEach(entry => {
                    if (!ModSettings.Blueprints.UsedGUIDs.ContainsKey(entry.Key)) {
                        ModSettings.Blueprints.UnusedGUIDs[entry.Key] = entry.Value;
                    }
                });
            }
            private static void WriteBlueprints(string fileName) {
                string userConfigFolder = ModSettings.ModEntry.Path + "UserSettings";
                var userPath = $"{userConfigFolder}{Path.DirectorySeparatorChar}{fileName}";

                JsonSerializer serializer = new JsonSerializer {
                    NullValueHandling = NullValueHandling.Include,
                    Formatting = Formatting.Indented
                };
                using (StreamWriter sWriter = new StreamWriter(userPath))
                using (JsonWriter jWriter = new JsonTextWriter(sWriter)) {
                    serializer.Serialize(jWriter, ModSettings.Blueprints);
                }
            }

            private static String guid_MinaghoCh1FightCue1 = "3366bebb89eda3146807ff1da718f1e8";
            private static String guid_MinaghoLightsOutCue = "15d76c39bc985cd4eab3e219fc364ae0";
            private static void SetupCueHooks()
            {
                BlueprintCue blueprintCue = ResourcesLibrary.TryGetBlueprint<BlueprintCue>(BlueprintGuid.Parse(guid_MinaghoCh1FightCue1));
                Helpers.AppendInPlace(ref blueprintCue.OnShow.Actions, new Cue_0001_GameAction());

                blueprintCue = ResourcesLibrary.TryGetBlueprint<BlueprintCue>(BlueprintGuid.Parse(guid_MinaghoLightsOutCue));
                Helpers.AppendInPlace(ref blueprintCue.OnShow.Actions, new Cue_Minagho_LightsOut_GameAction());
            }
        }

        private static String guid_NPCImmortalityBuff = "281a1f606d92728409ee5cbf5599855d";
        private static BlueprintBuff NPCImmortalityBuff;

        public static bool HasNPCImmortalityBuff(Kingmaker.UnitLogic.UnitDescriptor owner)
        {
            if (NPCImmortalityBuff == null)
            {
                NPCImmortalityBuff = ResourcesLibrary.TryGetBlueprint<BlueprintBuff>(BlueprintGuid.Parse(guid_NPCImmortalityBuff));
            }

            if (owner == null || NPCImmortalityBuff == null) return false;

            return owner.Buffs.GetBuff(NPCImmortalityBuff) != null;
        }
    }

    public class Cue_0001_GameAction : GameAction
    {
        public override string GetCaption()
        {
            return String.Empty;
        }

        public override void RunAction()
        {
            foreach (var u in Game.Instance.State.Units)
            {
                BlueprintFeature feat = Resources.GetModBlueprint<BlueprintFeature>(AddScalingSavingThrows.BLUEPRINTNAME);
                u.GetFeature(feat)?.TurnOff();

                feat = Resources.GetModBlueprint<BlueprintFeature>(AddScalingSkillBonus.BLUEPRINTNAME);
                u.GetFeature(feat)?.TurnOff();
            }
        }
    }

    public class Cue_Minagho_LightsOut_GameAction : GameAction
    {
        public override string GetCaption()
        {
            return String.Empty;
        }

        public override void RunAction()
        {
            foreach (var u in Game.Instance.State.Units)
            {
                BlueprintFeature feat = Resources.GetModBlueprint<BlueprintFeature>(AddScalingSavingThrows.BLUEPRINTNAME);
                u.GetFeature(feat)?.TurnOn();

                feat = Resources.GetModBlueprint<BlueprintFeature>(AddScalingSkillBonus.BLUEPRINTNAME);
                u.GetFeature(feat)?.TurnOn();
            }
        }
    }
}
